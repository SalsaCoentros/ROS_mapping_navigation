// Generated by gencpp from file lab2_communication/Set_Robot_ModelResponse.msg
// DO NOT EDIT!


#ifndef LAB2_COMMUNICATION_MESSAGE_SET_ROBOT_MODELRESPONSE_H
#define LAB2_COMMUNICATION_MESSAGE_SET_ROBOT_MODELRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <lab2_communication/robot_id.h>

namespace lab2_communication
{
template <class ContainerAllocator>
struct Set_Robot_ModelResponse_
{
  typedef Set_Robot_ModelResponse_<ContainerAllocator> Type;

  Set_Robot_ModelResponse_()
    : robotID()  {
    }
  Set_Robot_ModelResponse_(const ContainerAllocator& _alloc)
    : robotID(_alloc)  {
  (void)_alloc;
    }



   typedef  ::lab2_communication::robot_id_<ContainerAllocator>  _robotID_type;
  _robotID_type robotID;





  typedef boost::shared_ptr< ::lab2_communication::Set_Robot_ModelResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lab2_communication::Set_Robot_ModelResponse_<ContainerAllocator> const> ConstPtr;

}; // struct Set_Robot_ModelResponse_

typedef ::lab2_communication::Set_Robot_ModelResponse_<std::allocator<void> > Set_Robot_ModelResponse;

typedef boost::shared_ptr< ::lab2_communication::Set_Robot_ModelResponse > Set_Robot_ModelResponsePtr;
typedef boost::shared_ptr< ::lab2_communication::Set_Robot_ModelResponse const> Set_Robot_ModelResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lab2_communication::Set_Robot_ModelResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lab2_communication::Set_Robot_ModelResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lab2_communication::Set_Robot_ModelResponse_<ContainerAllocator1> & lhs, const ::lab2_communication::Set_Robot_ModelResponse_<ContainerAllocator2> & rhs)
{
  return lhs.robotID == rhs.robotID;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lab2_communication::Set_Robot_ModelResponse_<ContainerAllocator1> & lhs, const ::lab2_communication::Set_Robot_ModelResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lab2_communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lab2_communication::Set_Robot_ModelResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lab2_communication::Set_Robot_ModelResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lab2_communication::Set_Robot_ModelResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lab2_communication::Set_Robot_ModelResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lab2_communication::Set_Robot_ModelResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lab2_communication::Set_Robot_ModelResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lab2_communication::Set_Robot_ModelResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0c6e7b025d512f0c651bae0b3614dcd7";
  }

  static const char* value(const ::lab2_communication::Set_Robot_ModelResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0c6e7b025d512f0cULL;
  static const uint64_t static_value2 = 0x651bae0b3614dcd7ULL;
};

template<class ContainerAllocator>
struct DataType< ::lab2_communication::Set_Robot_ModelResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lab2_communication/Set_Robot_ModelResponse";
  }

  static const char* value(const ::lab2_communication::Set_Robot_ModelResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lab2_communication::Set_Robot_ModelResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lab2_communication/robot_id robotID\n"
"\n"
"================================================================================\n"
"MSG: lab2_communication/robot_id\n"
"Header header\n"
"int8 id\n"
"string model\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::lab2_communication::Set_Robot_ModelResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lab2_communication::Set_Robot_ModelResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robotID);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Set_Robot_ModelResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lab2_communication::Set_Robot_ModelResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lab2_communication::Set_Robot_ModelResponse_<ContainerAllocator>& v)
  {
    s << indent << "robotID: ";
    s << std::endl;
    Printer< ::lab2_communication::robot_id_<ContainerAllocator> >::stream(s, indent + "  ", v.robotID);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LAB2_COMMUNICATION_MESSAGE_SET_ROBOT_MODELRESPONSE_H
